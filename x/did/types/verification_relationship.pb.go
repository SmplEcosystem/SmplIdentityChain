// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: smplidentitychain/did/verification_relationship.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VerificationRelationship struct {
	// Types that are valid to be assigned to Content:
	//	*VerificationRelationship_VerificationMethodId
	//	*VerificationRelationship_VerificationMethod
	Content isVerificationRelationship_Content `protobuf_oneof:"content"`
}

func (m *VerificationRelationship) Reset()         { *m = VerificationRelationship{} }
func (m *VerificationRelationship) String() string { return proto.CompactTextString(m) }
func (*VerificationRelationship) ProtoMessage()    {}
func (*VerificationRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bcedcd00d4e590, []int{0}
}
func (m *VerificationRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationRelationship.Merge(m, src)
}
func (m *VerificationRelationship) XXX_Size() int {
	return m.Size()
}
func (m *VerificationRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationRelationship proto.InternalMessageInfo

type isVerificationRelationship_Content interface {
	isVerificationRelationship_Content()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VerificationRelationship_VerificationMethodId struct {
	VerificationMethodId string `protobuf:"bytes,1,opt,name=verification_method_id,json=verificationMethodId,proto3,oneof" json:"verification_method_id,omitempty"`
}
type VerificationRelationship_VerificationMethod struct {
	VerificationMethod *VerificationMethod `protobuf:"bytes,2,opt,name=verification_method,json=verificationMethod,proto3,oneof" json:"verification_method,omitempty"`
}

func (*VerificationRelationship_VerificationMethodId) isVerificationRelationship_Content() {}
func (*VerificationRelationship_VerificationMethod) isVerificationRelationship_Content()   {}

func (m *VerificationRelationship) GetContent() isVerificationRelationship_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *VerificationRelationship) GetVerificationMethodId() string {
	if x, ok := m.GetContent().(*VerificationRelationship_VerificationMethodId); ok {
		return x.VerificationMethodId
	}
	return ""
}

func (m *VerificationRelationship) GetVerificationMethod() *VerificationMethod {
	if x, ok := m.GetContent().(*VerificationRelationship_VerificationMethod); ok {
		return x.VerificationMethod
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VerificationRelationship) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VerificationRelationship_VerificationMethodId)(nil),
		(*VerificationRelationship_VerificationMethod)(nil),
	}
}

func init() {
	proto.RegisterType((*VerificationRelationship)(nil), "smplidentitychain.did.VerificationRelationship")
}

func init() {
	proto.RegisterFile("smplidentitychain/did/verification_relationship.proto", fileDescriptor_a3bcedcd00d4e590)
}

var fileDescriptor_a3bcedcd00d4e590 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2d, 0xce, 0x2d, 0xc8,
	0xc9, 0x4c, 0x49, 0xcd, 0x2b, 0xc9, 0x2c, 0xa9, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0xc9,
	0x4c, 0xd1, 0x2f, 0x4b, 0x2d, 0xca, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b, 0x2f,
	0x4a, 0xcd, 0x01, 0x33, 0x8a, 0x33, 0x32, 0x0b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x44,
	0x31, 0xb4, 0xe9, 0xa5, 0x64, 0xa6, 0x48, 0xe9, 0x13, 0x61, 0x5a, 0x6e, 0x6a, 0x49, 0x46, 0x7e,
	0x0a, 0xc4, 0x1c, 0xa5, 0xdd, 0x8c, 0x5c, 0x12, 0x61, 0x48, 0xb2, 0x41, 0x48, 0x56, 0x09, 0x99,
	0x71, 0x89, 0x61, 0xd1, 0x19, 0x9f, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xe9, 0xc1, 0x10,
	0x24, 0x82, 0x2c, 0xef, 0x0b, 0x96, 0xf6, 0x4c, 0x11, 0x8a, 0xe1, 0x12, 0xc6, 0xa2, 0x4f, 0x82,
	0x49, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x53, 0x0f, 0xab, 0xd3, 0xf5, 0xc2, 0x30, 0x4c, 0xf2, 0x60,
	0x08, 0x12, 0xc2, 0x34, 0xdf, 0x89, 0x93, 0x8b, 0x3d, 0x39, 0x3f, 0xaf, 0x24, 0x35, 0xaf, 0xc4,
	0x29, 0xe8, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0,
	0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0x02, 0x18, 0xa3, 0xcc, 0xd2,
	0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x83, 0x73, 0x0b, 0x72, 0x5c, 0x93,
	0xf3, 0x8b, 0x2b, 0x8b, 0x4b, 0x52, 0x21, 0x3c, 0x4f, 0xa8, 0xfd, 0xce, 0xe0, 0x30, 0xaa, 0x00,
	0x87, 0x52, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38, 0x60, 0x8c, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x44, 0x21, 0xa0, 0x3b, 0x99, 0x01, 0x00, 0x00,
}

func (m *VerificationRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		{
			size := m.Content.Size()
			i -= size
			if _, err := m.Content.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VerificationRelationship_VerificationMethodId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationRelationship_VerificationMethodId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.VerificationMethodId)
	copy(dAtA[i:], m.VerificationMethodId)
	i = encodeVarintVerificationRelationship(dAtA, i, uint64(len(m.VerificationMethodId)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *VerificationRelationship_VerificationMethod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationRelationship_VerificationMethod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VerificationMethod != nil {
		{
			size, err := m.VerificationMethod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerificationRelationship(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintVerificationRelationship(dAtA []byte, offset int, v uint64) int {
	offset -= sovVerificationRelationship(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VerificationRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *VerificationRelationship_VerificationMethodId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerificationMethodId)
	n += 1 + l + sovVerificationRelationship(uint64(l))
	return n
}
func (m *VerificationRelationship_VerificationMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerificationMethod != nil {
		l = m.VerificationMethod.Size()
		n += 1 + l + sovVerificationRelationship(uint64(l))
	}
	return n
}

func sovVerificationRelationship(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVerificationRelationship(x uint64) (n int) {
	return sovVerificationRelationship(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VerificationRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerificationRelationship
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerificationRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerificationRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerificationRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = &VerificationRelationship_VerificationMethodId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerificationRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerificationRelationship
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerificationRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VerificationMethod{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &VerificationRelationship_VerificationMethod{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerificationRelationship(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerificationRelationship
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVerificationRelationship(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVerificationRelationship
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerificationRelationship
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerificationRelationship
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVerificationRelationship
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVerificationRelationship
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVerificationRelationship
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVerificationRelationship        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVerificationRelationship          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVerificationRelationship = fmt.Errorf("proto: unexpected end of group")
)
