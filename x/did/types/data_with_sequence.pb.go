// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: smplidentitychain/did/data_with_sequence.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DataWithSequence struct {
	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *DataWithSequence) Reset()         { *m = DataWithSequence{} }
func (m *DataWithSequence) String() string { return proto.CompactTextString(m) }
func (*DataWithSequence) ProtoMessage()    {}
func (*DataWithSequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0c36e7acb2b65eb, []int{0}
}
func (m *DataWithSequence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataWithSequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataWithSequence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataWithSequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataWithSequence.Merge(m, src)
}
func (m *DataWithSequence) XXX_Size() int {
	return m.Size()
}
func (m *DataWithSequence) XXX_DiscardUnknown() {
	xxx_messageInfo_DataWithSequence.DiscardUnknown(m)
}

var xxx_messageInfo_DataWithSequence proto.InternalMessageInfo

func (m *DataWithSequence) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataWithSequence) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func init() {
	proto.RegisterType((*DataWithSequence)(nil), "smplidentitychain.did.DataWithSequence")
}

func init() {
	proto.RegisterFile("smplidentitychain/did/data_with_sequence.proto", fileDescriptor_a0c36e7acb2b65eb)
}

var fileDescriptor_a0c36e7acb2b65eb = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2b, 0xce, 0x2d, 0xc8,
	0xc9, 0x4c, 0x49, 0xcd, 0x2b, 0xc9, 0x2c, 0xa9, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0xc9,
	0x4c, 0xd1, 0x4f, 0x49, 0x2c, 0x49, 0x8c, 0x2f, 0xcf, 0x2c, 0xc9, 0x88, 0x2f, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc5, 0x50, 0xaf, 0x97,
	0x92, 0x99, 0xa2, 0xe4, 0xc4, 0x25, 0xe0, 0x92, 0x58, 0x92, 0x18, 0x9e, 0x59, 0x92, 0x11, 0x0c,
	0xd5, 0x20, 0x24, 0xc4, 0xc5, 0x02, 0x32, 0x46, 0x82, 0x51, 0x81, 0x51, 0x83, 0x27, 0x08, 0xcc,
	0x16, 0x92, 0xe2, 0xe2, 0x80, 0x19, 0x28, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x12, 0x04, 0xe7, 0x3b,
	0x05, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e,
	0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x59, 0x7a, 0x66, 0x49,
	0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x70, 0x6e, 0x41, 0x8e, 0x6b, 0x72, 0x7e, 0x71,
	0x65, 0x71, 0x49, 0x2a, 0x84, 0xe7, 0x09, 0x75, 0x8d, 0x33, 0xd8, 0xf5, 0x15, 0x60, 0xf7, 0x97,
	0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0xdd, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x2f,
	0x2a, 0xf0, 0x11, 0xe5, 0x00, 0x00, 0x00,
}

func (m *DataWithSequence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataWithSequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataWithSequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintDataWithSequence(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDataWithSequence(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataWithSequence(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataWithSequence(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataWithSequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDataWithSequence(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovDataWithSequence(uint64(m.Sequence))
	}
	return n
}

func sovDataWithSequence(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataWithSequence(x uint64) (n int) {
	return sovDataWithSequence(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataWithSequence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataWithSequence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataWithSequence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataWithSequence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataWithSequence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataWithSequence
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataWithSequence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataWithSequence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataWithSequence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataWithSequence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataWithSequence(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataWithSequence
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataWithSequence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataWithSequence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataWithSequence
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataWithSequence
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataWithSequence
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataWithSequence        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataWithSequence          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataWithSequence = fmt.Errorf("proto: unexpected end of group")
)
